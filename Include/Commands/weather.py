import requests
from bs4 import BeautifulSoup

weather_type = {
    "–ü–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è‚òÅÔ∏è‚òÅÔ∏è",
    "–Ø—Å–Ω–æ": "‚òÄÔ∏è",
    "–û–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
    "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "‚õÖÔ∏è",
    "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üåß",
    "–î–æ–∂–¥—å": "üåß‚òîÔ∏èüåß",
    "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ": "üå§",
    "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": "‚ùÑ",
    "–°–Ω–µ–≥": "‚ùÑ‚õÑ‚ùÑ",
    "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º": "üåß‚ùÑüåß"
}


def weather(tomorrow=False, week=False):
    time_day = ['–£—Ç—Ä–æ–º', '–î–Ω—ë–º', '–í–µ—á–µ—Ä–æ–º', '–ù–æ—á—å—é']
    numb_card_for_parsing = [0]
    day = '—Å–µ–≥–æ–¥–Ω—è'

    if tomorrow:
        numb_card_for_parsing = [2]
        day = '–∑–∞–≤—Ç—Ä–∞'

    if week:
        numb_card_for_parsing = [0, 2, 3, 4, 5, 6, 7, 8]
        day = '–Ω–µ–¥–µ–ª—é'

    try:
        html_text = requests.get('https://yandex.ru/pogoda/izhevsk/details?via=ms').text
        soup = BeautifulSoup(html_text, features="html.parser")
        weather_soup = soup.find_all('div', {'class', 'card'})

        result_weather = ['–ü–æ–≥–æ–¥–∞ –Ω–∞ {}:\n'.format(day), '']

        for card in numb_card_for_parsing:

            weather_condition = weather_soup[card].find_all('td', {'class', 'weather-table__body-cell weather-table__body-cell_type_condition'})

            temp = weather_soup[card].find_all('div', {'class', 'weather-table__temp'})

            temp_feels_like = weather_soup[card].find_all('td', {'class', 'weather-table__body-cell weather-table__body-cell_type_feels-like'})

            date = '{} {}\n'.format(
                weather_soup[card].find('strong', {'class', 'forecast-details__day-number'}).text,
                weather_soup[card].find('span', {'class', 'forecast-details__day-month'}).text)

            result_weather[0] += date
            result_weather[1] = weather_condition[2].text
            for day in range(len(time_day)):
                result_weather[0] += "{0} {1}, {2}{3}, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {4}\n".format(
                    time_day[day], temp[day].text, weather_condition[day].text,
                    weather_type[weather_condition[day].text], temp_feels_like[day].text)
            result_weather[0] += '\n'
        return result_weather

    except BaseException:
        print("Error weather")
        return ("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É :(", "Err")
